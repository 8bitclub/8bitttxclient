#!/bin/bash

TITLE="8BitClub Teletext Services - CLIENT (version 1.0)"

run_sram_test() {
  RESULT=""
  PASS=true

  RESULT+="\n\Z4Step 1:\Zn Checking for SPI devices...\n"
  if ls /dev/spidev0.0 &>/dev/null && ls /dev/spidev0.1 &>/dev/null; then
    RESULT+="-> Devices found: \Z2OK\Zn\n\n"
  else
    RESULT+="-> Devices not found: \Z1FAIL\Zn\n\n"
    PASS=false
  fi

  RESULT+="\Z4Step 2:\Zn Running spi-test.py...\n"
  TEST_OUT=$(python3 ram-test/spi-test.py 2>/dev/null)
  if echo "$TEST_OUT" | grep -q "Status register response: \[0, 64\]"; then
    RESULT+="-> Response correct: \Z2OK\Zn\n\n"
  else
    RESULT+="-> Unexpected response: \Z1FAIL\Zn\n$TEST_OUT\n\n"
    PASS=false
  fi

  RESULT+="\Z4Step 3:\Zn Running spi-write.py...\n"
  WRITE_OUT=$(python3 ram-test/spi-write.py 2>/dev/null)
  if echo "$WRITE_OUT" | grep -q "Read back: 0xAB"; then
    RESULT+="-> Read back correct: \Z2OK\Zn\n\n"
  else
    RESULT+="-> Unexpected response: \Z1FAIL\Zn\n$WRITE_OUT\n\n"
    PASS=false
  fi

  RESULT+="\Z4Step 4:\Zn Running spi-burst-test.py...\n"
  BURST_OUT=$(python3 ram-test/spi-burst-test.py 2>/dev/null)
  if echo "$BURST_OUT" | grep -q "Burst test passed."; then
    RESULT+="-> Burst test passed: \Z2OK\Zn\n\n"
  else
    RESULT+="-> Unexpected response: \Z1FAIL\Zn\n$BURST_OUT\n\n"
    PASS=false
  fi

  if $PASS; then
    RESULT+="\n\Z2All diagnostics completed successfully.\Zn\n"
  else
    RESULT+="\n\Z1One or more tests failed.\Zn\n"
  fi

  dialog --colors --title "SPI SRAM TEST Result" --msgbox "$RESULT" 30 90
}

diagnostics_menu() {
  while true; do
    CHOICE=$(dialog --clear \
      --backtitle "$TITLE" \
      --title "Diagnostics Menu" \
      --menu "Select an option:" \
      15 50 2 \
      1 "SPI SRAM TEST" \
      2 "Back to Main Menu" \
      2>&1 >/dev/tty)

    clear

    case $CHOICE in
      1) run_sram_test ;;
      2) break ;;
    esac
  done
}

get_ip_info() {
  ip -4 a | grep -v '127.0.0.1' | grep inet | head -n 1 | awk '{print $2 " on " $NF}'
}

show_information() {
  IP_INFO=$(get_ip_info)
  MSG="8BitClub Teletext Services - CLIENT (Version 1.0)\n\n8BitClub - 2025\n\nIP Address: $IP_INFO"
  dialog --title "Information" --msgbox "$MSG" 12 60
}

network_settings() {
  TMPFILE=$(mktemp)

  dialog --form "Enter network settings (leave blank if DHCP):" 15 60 5 \
    "Interface:" 1 1 "eth0" 1 15 20 0 \
    "IP Address:" 2 1 "" 2 15 20 0 \
    "Netmask:" 3 1 "" 3 15 20 0 \
    "Gateway:" 4 1 "" 4 15 20 0 \
    2> "$TMPFILE"

  dialog --yesno "Use DHCP?" 7 40
  USE_DHCP=$?

  INTERFACE=$(sed -n 1p "$TMPFILE")
  IPADDR=$(sed -n 2p "$TMPFILE")
  NETMASK=$(sed -n 3p "$TMPFILE")
  GATEWAY=$(sed -n 4p "$TMPFILE")

  BACKUP="/etc/network/interfaces.bak.$(date +%s)"
  sudo cp /etc/network/interfaces "$BACKUP"

  if [ "$USE_DHCP" -eq 0 ]; then
    sudo bash -c "cat > /etc/network/interfaces" <<EOF
auto lo
iface lo inet loopback

auto $INTERFACE
iface $INTERFACE inet dhcp
EOF
  else
    sudo bash -c "cat > /etc/network/interfaces" <<EOF
auto lo
iface lo inet loopback

auto $INTERFACE
iface $INTERFACE inet static
    address $IPADDR
    netmask $NETMASK
    gateway $GATEWAY
EOF
  fi

  dialog --msgbox "Network settings applied.\nBackup: $BACKUP\nRestarting networking..." 10 50
  sudo systemctl restart networking

  rm "$TMPFILE"
}

options_menu() {
  while true; do
    CHOICE=$(dialog --clear \
      --backtitle "$TITLE" \
      --title "Options Menu" \
      --menu "Select an option:" \
      15 50 2 \
      1 "Network Settings" \
      2 "Back to Main Menu" \
      2>&1 >/dev/tty)

    clear

    case $CHOICE in
      1) network_settings ;;
      2) break ;;
    esac
  done
}

main_menu() {
  while true; do
    CHOICE=$(dialog --clear \
      --backtitle "$TITLE" \
      --title "$TITLE" \
      --menu "Select an option:" \
      20 60 6 \
      1 "Diagnostics" \
      2 "Options" \
      3 "Information" \
      4 "Exit" \
      2>&1 >/dev/tty)

    clear

    case $CHOICE in
      1) diagnostics_menu ;;
      2) options_menu ;;
      3) show_information ;;
      4) break ;;
    esac
  done
}

main_menu
